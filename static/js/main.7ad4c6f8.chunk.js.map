{"version":3,"sources":["CryptoTracker.jsx","App.js","reportWebVitals.js","index.js"],"names":["CryptoTracker","bestMarketBTCbuy","useState","BTCBuy","setBTCBuy","BTCSell","setBTCSell","ETHBuy","setETHBuy","ETHSell","setETHSell","BTCBuy2","setBTCBuy2","BTCSell2","setBTCSell2","ETHBuy2","setETHBuy2","ETHSell2","setETHSell2","bestBTCbuy","Math","min","bestMarketBTCSell","bestBTCsell","max","bestMarketETHBuy","bestETHbuy","bestMarketETHSell","bestETHsell","useEffect","getBTCBuy","axios","get","getBTCSell","getETHBuy","getETHSell","getBTCBuy2","getBTCSell2","getETHBuy2","getETHSell2","all","then","spread","allData","getDataBTCBuy","data","amount","getDataBTCSell","getDataETHBuy","getDataETHSell","getDataBTCBuy2","ask","getDataBTCSell2","bid","getDataETHBuy2","getDataETHSell2","console","log","fetchData","className","Container","Row","Card","style","width","Body","Title","Subtitle","Text","Link","href","Accordion","defaultActiveKey","Item","eventKey","Header","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yPAqNgBA,EAhNM,WAElB,IAcIC,EAdJ,EAA4BC,mBAAS,IAArC,mBAAOC,EAAP,KAAeC,EAAf,KACA,EAA8BF,mBAAS,IAAvC,mBAAOG,EAAP,KAAgBC,EAAhB,KAEA,EAA4BJ,mBAAS,IAArC,mBAAOK,EAAP,KAAeC,EAAf,KACA,EAA8BN,mBAAS,IAAvC,mBAAOO,EAAP,KAAgBC,EAAhB,KAEA,EAA8BR,mBAAS,IAAvC,mBAAOS,EAAP,KAAgBC,EAAhB,KACA,EAAgCV,mBAAS,IAAzC,mBAAOW,EAAP,KAAiBC,EAAjB,KAEA,EAA8BZ,mBAAS,IAAvC,mBAAOa,EAAP,KAAgBC,EAAhB,KACA,EAAgCd,mBAAS,IAAzC,mBAAOe,EAAP,KAAiBC,EAAjB,KAEMC,EAAaC,KAAKC,IAAIlB,EAAQQ,GAIlCV,EADCE,GAAQQ,EACU,SAEA,WAGrB,IAEIW,EAFEC,EAAcH,KAAKI,IAAInB,EAASQ,GAIpCS,EADCjB,GAASQ,EACU,SAEA,WAGtB,IAEIY,EAFEC,EAAaN,KAAKC,IAAId,EAAQQ,GAIlCU,EADClB,GAAQQ,EACU,SAEA,WAGrB,IAEIY,EAFEC,EAAcR,KAAKI,IAAIf,EAASQ,GAIpCU,EADClB,GAASQ,EACU,SAEA,WA+DzB,OALDY,qBAAU,YArDY,WACd,IAYMC,EAAYC,IAAMC,IAZP,kDAaXC,EAAaF,IAAMC,IAZP,mDAcZE,EAAYH,IAAMC,IAZN,kDAaZG,EAAYJ,IAAMC,IAZL,mDAcbI,EAAaL,IAAMC,IAZP,8CAaZK,EAAcN,IAAMC,IAZP,8CAcbM,EAAaP,IAAMC,IAZN,8CAabO,EAAaR,IAAMC,IAZL,8CAcpBD,IAAMS,IAAI,CAACV,EAAWG,EAAYC,EAAWC,EAAYC,EAAYC,EAAaC,EAAYC,IAAcE,KACxGV,IAAMW,QAAO,WAAiB,IAAD,uBAAZC,EAAY,yBAAZA,EAAY,gBACzB,IAAMC,EAAgBD,EAAQ,GAAGE,KAAKA,KAAKC,OACrCC,EAAiBJ,EAAQ,GAAGE,KAAKA,KAAKC,OACtCE,EAAgBL,EAAQ,GAAGE,KAAKA,KAAKC,OACrCG,EAAiBN,EAAQ,GAAGE,KAAKA,KAAKC,OAEtCI,EAAiBP,EAAQ,GAAGE,KAAKM,IACjCC,EAAkBT,EAAQ,GAAGE,KAAKQ,IAClCC,EAAiBX,EAAQ,GAAGE,KAAKM,IACjCI,EAAkBZ,EAAQ,GAAGE,KAAKQ,IAEpCG,QAAQC,IAAIV,GACxB3C,EAAUwC,GACVtC,EAAWyC,GACXvC,EAAUwC,GACVtC,EAAWuC,GAEXrC,EAAWsC,GACXpC,EAAYsC,GACZpC,EAAWsC,GACXpC,EAAYqC,OAQhBG,KACD,IAIH,gCACA,oBAAIC,UAAU,sBAAd,yCAGA,eAACC,EAAA,EAAD,CAAWD,UAAU,cAArB,UACE,eAACE,EAAA,EAAD,CAAKF,UAAU,4BAAf,UACF,cAACG,EAAA,EAAD,CAAMC,MAAO,CAAEC,MAAO,SACtBL,UAAU,+CADV,SAEE,eAACG,EAAA,EAAKG,KAAN,WACE,cAACH,EAAA,EAAKI,MAAN,6BACA,cAACJ,EAAA,EAAKK,SAAN,CAAeR,UAAU,kBAAzB,sBACA,eAACG,EAAA,EAAKM,KAAN,4BACgBjE,KAEhB,eAAC2D,EAAA,EAAKM,KAAN,6BACiB/D,KAGjB,cAACyD,EAAA,EAAKO,KAAN,CAAWC,KAAK,uCAAhB,oCAIJ,cAACR,EAAA,EAAD,CAAMC,MAAO,CAAEC,MAAO,SACtBL,UAAU,+CADV,SAEE,eAACG,EAAA,EAAKG,KAAN,WACE,cAACH,EAAA,EAAKI,MAAN,6BACA,cAACJ,EAAA,EAAKK,SAAN,CAAeR,UAAU,kBAAzB,oBACA,eAACG,EAAA,EAAKM,KAAN,4BACgBzD,KAEhB,eAACmD,EAAA,EAAKM,KAAN,6BACiBvD,KAGjB,cAACiD,EAAA,EAAKO,KAAN,CAAWC,KAAK,0BAAhB,qCAKJ,eAACT,EAAA,EAAD,CAAKF,UAAU,4BAAf,UACA,cAACG,EAAA,EAAD,CAAMC,MAAO,CAAEC,MAAO,SACtBL,UAAU,gDADV,SAEE,eAACG,EAAA,EAAKG,KAAN,WACE,cAACH,EAAA,EAAKI,MAAN,8BACA,cAACJ,EAAA,EAAKK,SAAN,CAAeR,UAAU,kBAAzB,sBACA,eAACG,EAAA,EAAKM,KAAN,6BACgB7D,KAEhB,eAACuD,EAAA,EAAKM,KAAN,6BACiB3D,KAGjB,cAACqD,EAAA,EAAKO,KAAN,CAAWC,KAAK,wCAAhB,oCAIJ,cAACR,EAAA,EAAD,CAAMC,MAAO,CAAEC,MAAO,SACtBL,UAAU,gDADV,SAEE,eAACG,EAAA,EAAKG,KAAN,WACE,cAACH,EAAA,EAAKI,MAAN,8BACA,cAACJ,EAAA,EAAKK,SAAN,CAAeR,UAAU,kBAAzB,oBACA,eAACG,EAAA,EAAKM,KAAN,6BACgBrD,KAEhB,eAAC+C,EAAA,EAAKM,KAAN,6BACiBnD,KAGjB,cAAC6C,EAAA,EAAKO,KAAN,CAAWC,KAAK,0BAAhB,qCAKJ,cAACT,EAAA,EAAD,CAAKF,UAAU,4BAAf,SACA,eAACY,EAAA,EAAD,CAAWR,MAAO,CAAEC,MAAO,SAAWQ,iBAAiB,IACvDb,UAAU,6BADV,UAEE,eAACY,EAAA,EAAUE,KAAX,CAAgBC,SAAS,IAAzB,UACE,cAACH,EAAA,EAAUI,OAAX,0DACA,eAACJ,EAAA,EAAUN,KAAX,WACJ,4CADI,QACqB9C,EADrB,qBACmDlB,EACvD,oBAAI0D,UAAU,MAAd,wBAFI,QAEqCpC,EAFrC,qBAEoED,QAGtE,eAACiD,EAAA,EAAUE,KAAX,CAAgBC,SAAS,IAAzB,UACE,cAACH,EAAA,EAAUI,OAAX,0DACA,eAACJ,EAAA,EAAUN,KAAX,WACA,4CADA,QACyBvC,EADzB,sBACwDD,EACxD,oBAAIkC,UAAU,MAAd,wBAFA,QAEyC/B,EAFzC,sBAEyED,oBCpM9DiD,EAJH,kBACR,cAAC,EAAD,KCQWC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBtC,MAAK,YAAkD,IAA/CuC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,MCEdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.7ad4c6f8.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { Card, Container, Row, Accordion } from 'react-bootstrap';\r\nimport axios from \"axios\";\r\n \r\n\r\nconst CryptoTracker = () => {\r\n\r\n    const [BTCBuy, setBTCBuy] = useState([]);\r\n    const [BTCSell, setBTCSell] = useState([]);\r\n\r\n    const [ETHBuy, setETHBuy] = useState([]);\r\n    const [ETHSell, setETHSell] = useState([]);\r\n\r\n    const [BTCBuy2, setBTCBuy2] = useState([]);\r\n    const [BTCSell2, setBTCSell2] = useState([]);\r\n\r\n    const [ETHBuy2, setETHBuy2] = useState([]);\r\n    const [ETHSell2, setETHSell2] = useState([]);\r\n\r\n    const bestBTCbuy = Math.min(BTCBuy, BTCBuy2)\r\n\r\n    let bestMarketBTCbuy\r\n    if(BTCBuy>=BTCBuy2){\r\n      bestMarketBTCbuy = \"Gemini\"\r\n    } else{\r\n      bestMarketBTCbuy = \"Coinbase\"\r\n    }\r\n\r\n    const bestBTCsell = Math.max(BTCSell, BTCSell2)\r\n\r\n    let bestMarketBTCSell\r\n    if(BTCSell<=BTCSell2){\r\n      bestMarketBTCSell = \"Gemini\"\r\n    } else{\r\n      bestMarketBTCSell = \"Coinbase\"\r\n    }\r\n\r\n    const bestETHbuy = Math.min(ETHBuy, ETHBuy2)\r\n\r\n    let bestMarketETHBuy\r\n    if(ETHBuy>=ETHBuy2){\r\n      bestMarketETHBuy = \"Gemini\"\r\n    } else{\r\n      bestMarketETHBuy = \"Coinbase\"\r\n    }\r\n\r\n    const bestETHsell = Math.max(ETHSell, ETHSell2)\r\n    \r\n    let bestMarketETHSell\r\n    if(ETHSell<=ETHSell2){\r\n      bestMarketETHSell = \"Gemini\"\r\n    } else{\r\n      bestMarketETHSell = \"Coinbase\"\r\n    }\r\n\r\n  \r\n\r\n    const fetchData = () => {\r\n        const BTCBuyAPI ='https://api.coinbase.com/v2/prices/BTC-USD/buy'\r\n        const BTCSellAPI ='https://api.coinbase.com/v2/prices/BTC-USD/sell'\r\n        \r\n        const ETHBuyAPI = 'https://api.coinbase.com/v2/prices/ETH-USD/buy'\r\n        const ETHSellAPI = 'https://api.coinbase.com/v2/prices/ETH-USD/sell'\r\n    \r\n        const BTCBuyAPI2 ='https://api.gemini.com/v1/pubticker/btcusd'\r\n        const BTCSellAPI2 ='https://api.gemini.com/v1/pubticker/btcusd'\r\n\r\n        const ETHBuyAPI2 = 'https://api.gemini.com/v1/pubticker/ethusd'\r\n        const ETHSellAPI2 = 'https://api.gemini.com/v1/pubticker/ethusd'\r\n\r\n        const getBTCBuy = axios.get(BTCBuyAPI)\r\n        const getBTCSell = axios.get(BTCSellAPI)\r\n\r\n        const getETHBuy = axios.get(ETHBuyAPI)\r\n        const getETHSell =axios.get(ETHSellAPI)\r\n\r\n        const getBTCBuy2 = axios.get(BTCBuyAPI2)\r\n        const getBTCSell2 = axios.get(BTCSellAPI2)\r\n\r\n        const getETHBuy2 = axios.get(ETHBuyAPI2)\r\n        const getETHSell2 =axios.get(ETHSellAPI2)\r\n\r\n        axios.all([getBTCBuy, getBTCSell, getETHBuy, getETHSell, getBTCBuy2, getBTCSell2, getETHBuy2, getETHSell2]).then(\r\n            axios.spread((...allData) => {\r\n                const getDataBTCBuy = allData[0].data.data.amount\r\n                const getDataBTCSell = allData[1].data.data.amount\r\n                const getDataETHBuy = allData[2].data.data.amount\r\n                const getDataETHSell = allData[3].data.data.amount\r\n\r\n                const getDataBTCBuy2 = allData[4].data.ask\r\n                const getDataBTCSell2 = allData[5].data.bid\r\n                const getDataETHBuy2 = allData[6].data.ask\r\n                const getDataETHSell2 = allData[7].data.bid\r\n\r\n                    console.log(getDataBTCSell)\r\n        setBTCBuy(getDataBTCBuy)\r\n        setBTCSell(getDataBTCSell)\r\n        setETHBuy(getDataETHBuy)\r\n        setETHSell(getDataETHSell)\r\n\r\n        setBTCBuy2(getDataBTCBuy2)\r\n        setBTCSell2(getDataBTCSell2)\r\n        setETHBuy2(getDataETHBuy2)\r\n        setETHSell2(getDataETHSell2)\r\n\r\n            })\r\n        )\r\n    }\r\n\r\n\r\nuseEffect(() => {\r\n    fetchData()\r\n}, [])\r\n\r\n\r\n return (\r\n<div>\r\n<h1 className=\"text-center m-3 p-2\">\r\n    Cryptocurrency Market Rates\r\n</h1>\r\n<Container className=\"text-center\">\r\n  <Row className=\"justify-content-md-center\"> \r\n<Card style={{ width: '18rem' }}\r\nclassName=\"shadow-sm rounded m-3 p-2 align-items-center\">\r\n  <Card.Body>\r\n    <Card.Title>Bitcoin Market</Card.Title>\r\n    <Card.Subtitle className=\"mb-2 text-muted\">Coinbase</Card.Subtitle>\r\n    <Card.Text>\r\n     Bitcoin Buy: ${BTCBuy}  \r\n    </Card.Text>\r\n    <Card.Text>\r\n     Bitcoin Sell: ${BTCSell} \r\n    </Card.Text>\r\n\r\n    <Card.Link href=\"https://www.coinbase.com/buy-bitcoin\">Buy from Coinbase</Card.Link>\r\n  </Card.Body>\r\n</Card>\r\n\r\n<Card style={{ width: '18rem' }}\r\nclassName=\"shadow-sm rounded m-3 p-2 align-items-center\">\r\n  <Card.Body>\r\n    <Card.Title>Bitcoin Market</Card.Title>\r\n    <Card.Subtitle className=\"mb-2 text-muted\">Gemini</Card.Subtitle>\r\n    <Card.Text>\r\n     Bitcoin Buy: ${BTCBuy2}  \r\n    </Card.Text>\r\n    <Card.Text>\r\n     Bitcoin Sell: ${BTCSell2} \r\n    </Card.Text>\r\n\r\n    <Card.Link href=\"https://www.gemini.com/\">Buy from Gemini</Card.Link>\r\n  </Card.Body>\r\n</Card>\r\n</Row>\r\n\r\n<Row className=\"justify-content-md-center\">\r\n<Card style={{ width: '18rem' }}\r\nclassName=\"shadow-sm rounded m-3 p-2  align-items-center\">\r\n  <Card.Body>\r\n    <Card.Title>Ethereum Market</Card.Title>\r\n    <Card.Subtitle className=\"mb-2 text-muted\">Coinbase</Card.Subtitle>\r\n    <Card.Text>\r\n    Ethereum Buy: ${ETHBuy}  \r\n    </Card.Text>\r\n    <Card.Text>\r\n     Bitcoin Sell: ${ETHSell} \r\n    </Card.Text>\r\n\r\n    <Card.Link href=\"https://www.coinbase.com/buy-ethereum\">Buy from Coinbase</Card.Link>\r\n  </Card.Body>\r\n</Card>\r\n\r\n<Card style={{ width: '18rem' }}\r\nclassName=\"shadow-sm rounded m-3 p-2  align-items-center\">\r\n  <Card.Body>\r\n    <Card.Title>Ethereum Market</Card.Title>\r\n    <Card.Subtitle className=\"mb-2 text-muted\">Gemini</Card.Subtitle>\r\n    <Card.Text>\r\n    Ethereum Buy: ${ETHBuy2}  \r\n    </Card.Text>\r\n    <Card.Text>\r\n     Bitcoin Sell: ${ETHSell2} \r\n    </Card.Text>\r\n\r\n    <Card.Link href=\"https://www.gemini.com/\">Buy from Gemini</Card.Link>\r\n  </Card.Body>\r\n</Card>\r\n</Row>\r\n\r\n<Row className=\"justify-content-md-center\">\r\n<Accordion style={{ width: '40rem' }} defaultActiveKey=\"0\"\r\nclassName=\"align-items-center m-3 p-2\">\r\n  <Accordion.Item eventKey=\"0\">\r\n    <Accordion.Header>What is the best value for Bitcoin Market? </Accordion.Header>\r\n    <Accordion.Body>\r\n<h6>Best Buy: </h6> At ${bestBTCbuy} per Bitcoin from {bestMarketBTCbuy}\r\n<h6 className=\"m-2\">Best Sell:</h6> At ${bestBTCsell} per Bitcoin from {bestMarketBTCSell}\r\n    </Accordion.Body>\r\n  </Accordion.Item>\r\n  <Accordion.Item eventKey=\"1\">\r\n    <Accordion.Header>What is the best value for Ethereum Market?</Accordion.Header>\r\n    <Accordion.Body>\r\n    <h6>Best Buy: </h6> At ${bestETHbuy} per Ethereum from {bestMarketETHBuy}\r\n    <h6 className=\"m-2\">Best Sell:</h6> At ${bestETHsell} per Ethereum from {bestMarketETHSell}\r\n    </Accordion.Body>\r\n  </Accordion.Item>\r\n</Accordion>\r\n</Row>\r\n\r\n</Container>\r\n</div>\r\n )\r\n };\r\n export default CryptoTracker;\r\n\r\n","import CryptoTracker from \"./CryptoTracker\";\n\n\nconst App = () => (\n    <CryptoTracker/>\n);\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}